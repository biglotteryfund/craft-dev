#!/usr/bin/env node
'use strict';
const fs = require('fs');
const assert = require('assert');
const AWS = require('aws-sdk');

AWS.config.update({ region: 'eu-west-2' });

const secretDir = '/etc/craft';
const parametersDest = secretDir + '/parameters.json';

const argv = require('yargs').option('environment', {
    alias: 'env',
    default: 'development',
}).argv;

const secretsManager = new AWS.SecretsManager();

const getSecret = secretId => {
    return new Promise((resolve, reject) => {
        secretsManager.getSecretValue({
            SecretId: secretId,
        }, function(err, data) {
            if (err) {
                return reject(err)
            }
            try {
                const secretString = JSON.parse(data.SecretString);
                return resolve(secretString);
            } catch (err) {
                return reject(err);
            }
        });
    });
}

console.log('\n', `Fetching secrets for: ${argv.environment}`, '\n');

let environmentSecretId;
switch (argv.environment) {
    case 'production':
        environmentSecretId = '/CMS/Prod/Config';
        break;
    case 'test':
        environmentSecretId = '/CMS/Test/Config';
        break;
}

// Fetch global app secrets as well as environment-specific ones
const secretLookups = [
    getSecret('/CMS/Global/Config'),
    environmentSecretId ? getSecret(environmentSecretId) : null
];

// Merge the configs and write the resulting JSON to a file
Promise.all(secretLookups).then(results => {

    if (!fs.existsSync(secretDir)) {
        fs.mkdirSync(secretDir);
    }

    const [globals, envSpecific] = results
    const mergedConfig = Object.assign(globals, envSpecific);
    fs.writeFileSync(parametersDest, JSON.stringify(mergedConfig, null, 4));
    assert(fs.existsSync(parametersDest));

    console.log('Finished fetching parameters.');
    console.log(`Written to ${parametersDest}`);
})
.catch((err) => {
    throw err;
});